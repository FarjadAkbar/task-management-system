// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  avatar        String?
  first_name    String?
  last_name     String?

  webmail_email String?
  webmail_password String?
  
  clockin_username String?
  clockin_password String?

  folderId      String?
  
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  lastLoginAt   DateTime?         @db.Date
  
  userStatus ActiveStatus @default(PENDING)
  role       RoleEnum     @default(DEVELOPER)

  // Google Calendar integration
  googleRefreshToken String?
  googleAccessToken  String?
  googleTokenExpiry  DateTime?
  googleCalendarId   String?

  // File system relations
  documents         Documents[] @relation("user_documents")
  filesSharedByMe   FileShare[] @relation("shared_with")
  filesSharedWithMe FileShare[] @relation("shared_by")

  // Chat relation
  messages         ChatMessage[]
  chatRooms        ChatRoom[]        @relation("room_creator")
  chatParticipants ChatParticipant[]

  // Calendar relations
  calendarEvents CalendarEvent[] @relation("event_creator")
  eventAttendees EventAttendee[]
  availability   Availability[]

  // Project and Task relations
  createdProjects     Project[]       @relation("project_creator")
  memberOfProjects    ProjectMember[]
  createdSprints      Sprint[]        @relation("sprint_creator")
  assignedTasks       TaskAssignee[]
  createdTasks        Tasks[]         @relation("task_creator")
  taskComments        TasksComments[]
  taskFeedback        TaskFeedback[]
  subtasks            SubTask[]       @relation("subtask_creator")
  checklistItems      ChecklistItem[] @relation("checklist_creator")
  completedChecklists ChecklistItem[] @relation("checklist_completer")

  // Board relations
  createdBoards Boards[] @relation("board_creator")

  // Notes Relations
  notes Notes[]

  // Tools Relations
  tools Tools[]

  // Tickets Relations
  tickets          Ticket[]
  assigned_tickets Ticket[] @relation(name: "assigned_ticket")
}

// File System Models
model Documents {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  key                    String
  document_name          String
  document_file_url      String
  document_file_mimeType String
  document_system_type   String
  description            String?
  size                   Int?
  created_by_user        String   @db.ObjectId
  created_by             Users    @relation("user_documents", fields: [created_by_user], references: [id])
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  sharedWith FileShare[]
  tasks      TaskDocument[]
  Tools      Tools[]
}

model TaskDocument {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  taskId     String @db.ObjectId
  documentId String @db.ObjectId

  task     Tasks     @relation(fields: [taskId], references: [id])
  document Documents @relation(fields: [documentId], references: [id])
}

model FileShare {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  fileId       String   @db.ObjectId
  sharedById   String   @db.ObjectId
  sharedWithId String   @db.ObjectId
  permissions  String   @default("view") // view, edit
  createdAt    DateTime @default(now())

  // Relations
  file       Documents @relation(fields: [fileId], references: [id], onDelete: Cascade)
  sharedBy   Users     @relation("shared_by", fields: [sharedById], references: [id])
  sharedWith Users     @relation("shared_with", fields: [sharedWithId], references: [id])

  @@unique([fileId, sharedWithId])
}

// Calendar Models
model CalendarEvent {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String?
  startTime        DateTime
  endTime          DateTime
  allDay           Boolean  @default(false)
  location         String?
  googleEventId    String?
  googleCalendarId String?
  recurrence       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  creatorId        String   @db.ObjectId

  // Relations
  creator     Users           @relation("event_creator", fields: [creatorId], references: [id])
  attendees   EventAttendee[]
  meetingRoom MeetingRoom?
}

model EventAttendee {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  eventId        String  @db.ObjectId
  email          String
  name           String?
  userId         String? @db.ObjectId
  optional       Boolean @default(false)
  responseStatus String  @default("NEEDS_ACTION") // NEEDS_ACTION, DECLINED, TENTATIVE, ACCEPTED

  // Relations
  event CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  Users?        @relation(fields: [userId], references: [id])
}

model MeetingRoom {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  meetingCode String
  meetingUrl  String
  joinUrl     String
  eventId     String   @unique @db.ObjectId
  creatorId   String   @db.ObjectId
  createdAt   DateTime @default(now())

  // Relations
  event CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Availability {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  day       String // MONDAY, TUESDAY, etc.
  startTime String // HH:MM format
  endTime   String // HH:MM format
  isActive  Boolean @default(true)

  // Relations
  user Users @relation(fields: [userId], references: [id])

  @@unique([userId, day])
}

// Project Management Models
model Project {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdById String        @db.ObjectId

  // Relations
  createdBy Users           @relation("project_creator", fields: [createdById], references: [id])
  members   ProjectMember[]
  boards    Boards[]
  sprints   Sprint[]

  @@index([createdById])
}

model ProjectMember {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  projectId String      @db.ObjectId
  userId    String      @db.ObjectId
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    Users   @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model Sprint {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  goal        String?
  startDate   DateTime
  endDate     DateTime
  status      SprintStatus @default(PLANNING)
  projectId   String       @db.ObjectId
  createdById String       @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy Users   @relation("sprint_creator", fields: [createdById], references: [id])
  tasks     Tasks[]

  @@index([projectId])
}

model Boards {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  created_by_user String   @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  projectId       String?  @db.ObjectId

  // Relations
  created_by Users      @relation("board_creator", fields: [created_by_user], references: [id])
  project    Project?   @relation(fields: [projectId], references: [id])
  sections   Sections[]
}

model Sections {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  color     String?
  position  Int
  boardId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  board Boards  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks Tasks[] @relation("section_tasks")
}

model Tasks {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String?
  taskStatus String    @default("TODO")
  priority   String    @default("MEDIUM")
  position   Int       @default(0)
  section    String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  String?   @db.ObjectId
  updatedBy  String?   @db.ObjectId
  dueDateAt  DateTime?
  tags       String[]

  // New fields for project management
  sprintId       String?   @db.ObjectId
  weight         Int       @default(1)
  estimatedHours Float?
  actualHours    Float?
  startDate      DateTime?
  completedAt    DateTime?
  parentTaskId   String?   @db.ObjectId

  // Relations
  assigned_section Sections?       @relation("section_tasks", fields: [section], references: [id])
  sprint           Sprint?         @relation(fields: [sprintId], references: [id])
  assignees        TaskAssignee[]
  subtasks         SubTask[]
  checklists       ChecklistItem[]
  documents        TaskDocument[]
  comments         TasksComments[]
  task_feedback    TaskFeedback[]
  creator          Users?          @relation("task_creator", fields: [createdBy], references: [id])
  parentTask       Tasks?          @relation("task_hierarchy", fields: [parentTaskId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childTasks       Tasks[]         @relation("task_hierarchy")
}

model TaskAssignee {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId     String   @db.ObjectId
  userId     String   @db.ObjectId
  assignedAt DateTime @default(now())
  role       TaskRole @default(ASSIGNEE)

  // Relations
  task Tasks @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user Users @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
}

model SubTask {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  completed   Boolean   @default(false)
  taskId      String    @db.ObjectId
  createdById String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // Relations
  task      Tasks @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdBy Users @relation("subtask_creator", fields: [createdById], references: [id])

  @@index([taskId])
}

model ChecklistItem {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  completed     Boolean   @default(false)
  taskId        String    @db.ObjectId
  createdById   String    @db.ObjectId
  createdAt     DateTime  @default(now())
  completedAt   DateTime?
  completedById String?   @db.ObjectId

  // Relations
  task        Tasks  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdBy   Users  @relation("checklist_creator", fields: [createdById], references: [id])
  completedBy Users? @relation("checklist_completer", fields: [completedById], references: [id])

  @@index([taskId])
}

model TasksComments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  taskId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task          Tasks @relation(fields: [taskId], references: [id], onDelete: Cascade)
  assigned_user Users @relation(fields: [userId], references: [id])
}

model TaskFeedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  feedback  String
  rating    Int
  isPrivate Boolean  @default(false)
  taskId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  task Tasks @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user Users @relation(fields: [userId], references: [id])
}

model Notes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  is_public Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String   @db.ObjectId

  // Relations
  author Users @relation(fields: [authorId], references: [id])
}

model Ticket {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  status       TicketStatus   @default(OPEN)
  priority     TicketPriority @default(MEDIUM)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdById  String         @db.ObjectId
  assignedToId String?        @db.ObjectId

  // Relations
  createdBy  Users  @relation(fields: [createdById], references: [id])
  assignedTo Users? @relation("assigned_ticket", fields: [assignedToId], references: [id])
}

model Tools {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  username   String
  password   String
  department String
  user       String?  @db.ObjectId
  documentID String   @db.ObjectId
  createdAt  DateTime @default(now())

  // Relations
  document   Documents @relation(fields: [documentID], references: [id])
  created_by Users?    @relation(fields: [user], references: [id])
}

model ChatRoom {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  isGroup      Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  createdBy    String            @db.ObjectId
  creator      Users             @relation("room_creator", fields: [createdBy], references: [id])
  messages     ChatMessage[]
  participants ChatParticipant[]
}

model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  senderId  String   @db.ObjectId
  roomId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isRead    Boolean  @default(false)

  sender Users    @relation(fields: [senderId], references: [id])
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model ChatParticipant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  roomId      String   @db.ObjectId
  joinedAt    DateTime @default(now())
  lastSeen    DateTime @default(now())
  unreadCount Int      @default(0)

  user Users    @relation(fields: [userId], references: [id])
  room ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

// Enums
enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ProjectRole {
  OWNER
  MANAGER
  MEMBER
  VIEWER
}

enum SprintStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TaskRole {
  ASSIGNEE
  REVIEWER
  OBSERVER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Enums
enum RoleEnum {
  ADMIN
  DEVELOPER
  DESIGNER
  ANIMATOR
  SEO
  CONTENT_WRITER
  MANAGER
  MARKETER
  LEAD
  IT
  OPERATION
}

enum ActiveStatus {
  ACTIVE
  INACTIVE
  PENDING
}
