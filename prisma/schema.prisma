// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Boards {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  v                 Int        @map("__v")
  description       String
  favourite         Boolean?
  favouritePosition Int?
  icon              String?
  position          Int?
  title             String
  user              String     @db.ObjectId
  visibility        String?
  sharedWith        String[]   @db.ObjectId
  createdAt         DateTime?  @default(now()) @db.Date
  createdBy         String?    @db.ObjectId
  updatedAt         DateTime?  @updatedAt @db.Date
  updatedBy         String?    @db.ObjectId
  watchers          String[]   @db.ObjectId

  // Relations
  assigned_user    Users?     @relation(name: "assigned_user", fields: [user], references: [id])
  watchers_users   Users[]    @relation(name: "watching_users", fields: [watchers], references: [id])
  sections         Sections[]
}


model Documents {
  id                     String              @id @default(auto()) @map("_id") @db.ObjectId
  v                      Int?                @map("__v")
  date_created           DateTime?           @default(now()) @db.Date
  createdAt              DateTime?           @default(now()) @db.Date
  last_updated           DateTime?           @updatedAt
  updatedAt              DateTime?           @updatedAt @db.Date
  document_name          String
  created_by_user        String?             @db.ObjectId
  createdBy              String?             @db.ObjectId
  description            String?
  document_type          String?             @db.ObjectId
  favourite              Boolean?
  document_file_mimeType String
  document_file_url      String
  status                 String?
  visibility             String?
  tags                   Json?
  key                    String?
  size                   Int?
  assigned_user          String?             @db.ObjectId
  connected_documents    String[]
  tasksIDs               String[]            @db.ObjectId
  
  // Relations
  tasks                  Tasks[]             @relation(fields: [tasksIDs], references: [id])
  created_by             Users?              @relation(name: "created_by_user", fields: [created_by_user], references: [id])
  assigned_to_user       Users?              @relation(name: "assigned_to_user", fields: [assigned_user], references: [id])
  tools                  Tools[]             // Fixed: One-to-many relation
  sharedWith             FileShare[]
}


model FileShare {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  fileId      String    @db.ObjectId
  sharedById  String    @db.ObjectId
  sharedWithId String   @db.ObjectId
  createdAt   DateTime  @default(now())
  permissions String    @default("view") // "view" or "edit"
  
  file        Documents @relation(fields: [fileId], references: [id], onDelete: Cascade)
  sharedBy    Users     @relation("shared_by", fields: [sharedById], references: [id])
  sharedWith  Users     @relation("shared_with", fields: [sharedWithId], references: [id])
  
  @@unique([fileId, sharedWithId])
}

model Sections {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  v              Int     @map("__v")
  board          String  @db.ObjectId
  title          String
  position       Int?
  
  // Relations
  tasks          Tasks[]
  board_relation Boards  @relation(fields: [board], references: [id])
}

model Tasks {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  v                Int             @map("__v")
  content          String?
  createdAt        DateTime?       @default(now()) @db.Date
  createdBy        String?         @db.ObjectId
  updatedAt        DateTime?       @updatedAt @db.Date
  updatedBy        String?         @db.ObjectId
  dueDateAt        DateTime?       @default(now()) @db.Date
  lastEditedAt     DateTime?       @default(now()) @updatedAt @db.Date
  position         Int
  priority         String
  section          String?         @db.ObjectId
  tags             Json?
  title            String
  checklist        Json?
  likes            Int?            @default(0)
  user             String?         @db.ObjectId
  documentIDs      String[]        @db.ObjectId
  
  // Relations
  comments         TasksComments[]
  task_feedback    TaskFeedback[]
  documents        Documents[]     @relation(fields: [documentIDs], references: [id])
  assigned_user    Users?          @relation(fields: [user], references: [id])
  assigned_section Sections?       @relation(fields: [section], references: [id])
  
  // Status
  taskStatus       taskStatus?     @default(ACTIVE)
}

model TasksComments {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  v              Int       @map("__v")
  comment        String
  createdAt      DateTime  @default(now()) @db.Date
  task           String    @db.ObjectId
  user           String    @db.ObjectId
  
  // Relations
  assigned_task  Tasks?    @relation(fields: [task], references: [id], onDelete: Cascade)
  assigned_user  Users?    @relation(fields: [user], references: [id])
}

enum taskStatus {
  ACTIVE
  PENDING
  COMPLETE
}

enum ActiveStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model TaskFeedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId    String   @db.ObjectId
  userId    String   @db.ObjectId
  feedback  String
  rating    Int
  createdAt DateTime @default(now())
  
  // Relations
  task      Tasks    @relation(fields: [taskId], references: [id])
  user      Users    @relation(fields: [userId], references: [id])
}

model Feedback {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  suggestion    String
  submittedById String       @db.ObjectId
  createdAt     DateTime     @default(now())
  status        ActiveStatus @default(PENDING)
  
  // Relations
  submittedBy   Users        @relation(fields: [submittedById], references: [id])
}

enum RoleEnum {
  ADMIN
  DEVELOPER
  DESIGNER
  ANIMATOR
  SEO
  CONTENT_WRITER
  MANAGER
  MARKETER
  LEAD
  IT
  OPERATION
}

model Users {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  v                    Int               @default(0) @map("__v")
  avatar               String?
  email                String            @unique
  is_admin             Boolean           @default(false)
  created_on           DateTime          @default(now()) @db.Date
  lastLoginAt          DateTime?         @db.Date
  name                 String?
  first_name           String?
  last_name            String?
  password             String?
  username             String?
  
  // Google OAuth fields
  googleRefreshToken   String?
  googleAccessToken    String?
  googleTokenExpiry    DateTime?
  googleCalendarId     String?

  userStatus           ActiveStatus      @default(PENDING)
  role                 RoleEnum          @default(DEVELOPER)
  watching_boardsIDs   String[]          @db.ObjectId
  
  // Relations
  tasksComment         TasksComments[]
  taskFeedback         TaskFeedback[]
  created_by_documents Documents[]       @relation(name: "created_by_user")
  assigned_documents   Documents[]       @relation(name: "assigned_to_user")
  tasks                Tasks[]
  tools                Tools[]   
  boards               Boards[]          @relation(name: "assigned_user")
  tickets              Ticket[]            
  assigned_tickets     Ticket[]          @relation(name: "assigned_ticket") 
  watching_boards      Boards[]          @relation(name: "watching_users", fields: [watching_boardsIDs], references: [id])
  sentMessages         ChatMessage[]
  createdRooms         ChatRoom[]        @relation("room_creator")
  chatParticipations   ChatParticipant[]
  notes                Notes[]
  feedback             Feedback[]
  
  // Calendar relations
  calendarEvents       CalendarEvent[]    @relation("event_creator")
  attendingEvents      EventAttendee[]
  availability         Availability[]
  meetingRooms         MeetingRoom[]
  
  // Add these relations
  filesSharedByMe     FileShare[] @relation("shared_by")
  filesSharedWithMe   FileShare[] @relation("shared_with")
}


model CalendarEvent {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  startTime         DateTime
  endTime           DateTime
  allDay            Boolean           @default(false)
  location          String?
  status            EventStatus       @default(CONFIRMED)
  visibility        EventVisibility   @default(DEFAULT)
  recurrence        String?           // RFC 5545 recurrence rule
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Google Calendar specific fields
  googleEventId     String?           // ID in Google Calendar
  googleCalendarId  String?           // Calendar where event is stored
  colorId           String?           // Google Calendar color ID
  
  // Relations
  creatorId         String            @db.ObjectId
  creator           Users             @relation("event_creator", fields: [creatorId], references: [id])
  attendees         EventAttendee[]
  meetingRoom       MeetingRoom?
}

model EventAttendee {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  email             String
  name              String?
  responseStatus    ResponseStatus  @default(NEEDS_ACTION)
  optional          Boolean         @default(false)
  comment           String?
  
  // Relations
  eventId           String          @db.ObjectId
  event             CalendarEvent   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId            String?         @db.ObjectId
  user              Users?          @relation(fields: [userId], references: [id])
  
  @@unique([eventId, email])
}

model MeetingRoom {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  meetingCode       String?         // Google Meet code
  meetingUrl        String          // Google Meet URL
  joinUrl           String?         // URL for joining the meeting
  createdAt         DateTime        @default(now())
  
  // Relations
  eventId           String          @unique @db.ObjectId
  event             CalendarEvent   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  creatorId         String          @db.ObjectId
  creator           Users           @relation(fields: [creatorId], references: [id])
}

model Availability {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  day               Day
  startTime         String          // e.g., '08:00'
  endTime           String          // e.g., '18:00'
  isActive          Boolean         @default(true)
  userId            String          @db.ObjectId
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  user              Users           @relation(fields: [userId], references: [id])
  
  @@unique([userId, day])
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum EventStatus {
  CONFIRMED
  TENTATIVE
  CANCELLED
}

enum EventVisibility {
  DEFAULT
  PUBLIC
  PRIVATE
}

enum ResponseStatus {
  NEEDS_ACTION
  DECLINED
  TENTATIVE
  ACCEPTED
}


model Notes {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  is_public Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String    @db.ObjectId
  
  // Relations
  author    Users     @relation(fields: [authorId], references: [id])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Ticket {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  status       TicketStatus   @default(OPEN)
  priority     TicketPriority @default(MEDIUM)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdById  String         @db.ObjectId
  assignedToId String?        @db.ObjectId
  
  // Relations
  createdBy    Users          @relation(fields: [createdById], references: [id])
  assignedTo   Users?         @relation("assigned_ticket", fields: [assignedToId], references: [id])
}

model Tools {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  username   String
  password   String
  department String
  user       String?   @db.ObjectId
  documentID String    @db.ObjectId
  createdAt  DateTime  @default(now())
  
  // Relations
  document   Documents @relation(fields: [documentID], references: [id])
  created_by Users?    @relation(fields: [user], references: [id])
}



model ChatRoom {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  isGroup     Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdBy   String         @db.ObjectId
  creator     Users          @relation("room_creator", fields: [createdBy], references: [id])
  messages    ChatMessage[]
  participants ChatParticipant[]
}

model ChatMessage {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  senderId    String    @db.ObjectId
  roomId      String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isRead      Boolean   @default(false)
  
  sender      Users     @relation(fields: [senderId], references: [id])
  room        ChatRoom  @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model ChatParticipant {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  roomId      String    @db.ObjectId
  joinedAt    DateTime  @default(now())
  lastSeen    DateTime  @default(now())
  unreadCount Int       @default(0)
  
  user        Users     @relation(fields: [userId], references: [id])
  room        ChatRoom  @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}