// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Boards {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  v                 Int       @map("__v")
  description       String
  favourite         Boolean?
  favouritePosition Int?
  icon              String?
  position          Int?
  title             String
  user              String    @db.ObjectId
  visibility        String?
  sharedWith        String[]  @db.ObjectId
  createdAt         DateTime? @default(now()) @db.Date
  createdBy         String?   @db.ObjectId
  updatedAt         DateTime? @updatedAt @db.Date
  updatedBy         String?   @db.ObjectId

  //Create watechers field for board. It will be array of users
  watchers       String[] @db.ObjectId
  assigned_user  Users?   @relation(name: "assigned_user", fields: [user], references: [id])
  watchers_users Users[]  @relation(name: "watching_users", fields: [watchers], references: [id])
  sections       Sections[]
}


model ImageUpload {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}


model Documents {
  id                     String              @id @default(auto()) @map("_id") @db.ObjectId
  v                      Int?                @map("__v")
  date_created           DateTime?           @default(now()) @db.Date
  createdAt              DateTime?           @default(now()) @db.Date
  last_updated           DateTime?           @updatedAt
  updatedAt              DateTime?           @updatedAt @db.Date
  document_name          String
  created_by_user        String?             @db.ObjectId
  createdBy              String?             @db.ObjectId
  description            String?
  document_type          String?             @db.ObjectId
  favourite              Boolean?
  document_file_mimeType String
  document_file_url      String
  status                 String?
  visibility             String?
  tags                   Json?
  key                    String?
  size                   Int?
  assigned_user          String?             @db.ObjectId
  connected_documents    String[]
  tasksIDs               String[]            @db.ObjectId
  accountsIDs            String[]            @db.ObjectId
  tasks                  Tasks[]             @relation(fields: [tasksIDs], references: [id])
  created_by             Users?              @relation(name: "created_by_user", fields: [created_by_user], references: [id])
  assigned_to_user       Users?              @relation(name: "assigned_to_user", fields: [assigned_user], references: [id])
  documents_type         Documents_Types?    @relation(fields: [document_type], references: [id])
  document_system_type   DocumentSystemType? @default(OTHER)
}

enum DocumentSystemType {
  INVOICE
  RECEIPT
  CONTRACT
  OFFER
  OTHER
}

model Documents_Types {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  v                  Int         @map("__v")
  name               String
  assigned_documents Documents[]
}

model Sections {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  v        Int     @map("__v")
  board    String  @db.ObjectId
  title    String
  position Int?
  tasks    Tasks[]
  board_relation Boards @relation(fields: [board], references: [id])
}

model modulStatus {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  isVisible Boolean
}

model Tasks {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  v                Int             @map("__v")
  content          String?
  createdAt        DateTime?       @default(now()) @db.Date
  createdBy        String?         @db.ObjectId
  updatedAt        DateTime?       @updatedAt @db.Date
  updatedBy        String?         @db.ObjectId
  dueDateAt        DateTime?       @default(now()) @db.Date
  lastEditedAt     DateTime?       @default(now()) @updatedAt @db.Date
  position         Int
  priority         String
  section          String?         @db.ObjectId
  tags             Json?
  title            String
  checklist        Json?
  likes            Int?            @default(0)
  user             String?         @db.ObjectId
  documentIDs      String[]        @db.ObjectId
  comments         TasksComments[]
  task_feedback    TaskFeedback[]
  documents        Documents[]     @relation(fields: [documentIDs], references: [id])
  assigned_user    Users?          @relation(fields: [user], references: [id])
  assigned_section Sections?       @relation(fields: [section], references: [id])
  //Staus
  taskStatus       taskStatus?     @default(ACTIVE)
}


model TasksComments {
  id                             String              @id @default(auto()) @map("_id") @db.ObjectId
  v                              Int                 @map("__v")
  comment                        String
  createdAt                      DateTime            @default(now()) @db.Date
  task                           String              @db.ObjectId
  user                           String              @db.ObjectId
  assigned_task                  Tasks?              @relation(fields: [task], references: [id], onDelete: Cascade)
  assigned_user                  Users?              @relation(fields: [user], references: [id])
}

enum taskStatus {
  ACTIVE
  PENDING
  COMPLETE
}


enum ActiveStatus {
  ACTIVE
  INACTIVE
  PENDING
}



model Comment {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  createdBy      Users       @relation(fields: [createdById], references: [id])
  createdById    String      @db.ObjectId
  createdAt      DateTime    @default(now())
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  announcementId String      @db.ObjectId
}

model TaskFeedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId    String   @db.ObjectId
  task      Tasks    @relation(fields: [taskId], references: [id])
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  feedback  String
  rating    Int
  createdAt DateTime @default(now())
}

model Feedback {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  suggestion   String
  submittedBy  Users        @relation(fields: [submittedById], references: [id])
  submittedById String      @db.ObjectId
  createdAt    DateTime     @default(now())
  status       ActiveStatus @default(PENDING)
}


enum RoleEnum {
  ADMIN
  DEVELOPER
  DESIGNER
  ANIMATOR
  SEO
  CONTENT_WRITER
  MANAGER
  MARKETER
  LEAD
}

model Users {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  v                    Int                   @default(0) @map("__v")
  avatar               String?
  email                String                @unique
  is_admin             Boolean               @default(false)
  created_on           DateTime              @default(now()) @db.Date
  lastLoginAt          DateTime?             @db.Date
  name                 String?
  first_name           String?
  last_name            String?
  password             String?
  username             String?
  grantId              String?
  grantEmail           String?
  userStatus           ActiveStatus          @default(PENDING)
  tasksComment         TasksComments[]
  taskFeedback         TaskFeedback[]
  role                 RoleEnum              @default(DEVELOPER)
  created_by_documents Documents[]           @relation(name: "created_by_user")
  assigned_documents   Documents[]           @relation(name: "assigned_to_user")
  tasks                Tasks[]
  boards               Boards[]              @relation(name: "assigned_user")
  watching_boardsIDs   String[]              @db.ObjectId
  watching_boards      Boards[]              @relation(name: "watching_users", fields: [watching_boardsIDs], references: [id])
  instructionMaterials InstructionMaterial[]
  comments             Comment[]
  notes                Note[]
  sharedNotes          SharedNote[]
  sharedNoteAccess     SharedNoteAccess[]
  feedback             Feedback[]
  eventsParticipated   EventParticipant[]
  events               Event[]           
  Availability         Availability[] 
  announcements        Announcement[]
}


model Event {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  duration          Int
  url               String
  description       String
  date              String
  time              String
  active            Boolean              @default(true)
  videoCallSoftware String               @default("Google Meet")

  user              Users                @relation(fields: [userId], references: [id])
  userId            String               @db.ObjectId

  participants      EventParticipant[]
  createdAt         DateTime             @default(now())
}

model EventParticipant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
}

model Availability {
  id       String              @id @default(auto()) @map("_id") @db.ObjectId

  day      Day
  fromTime String // e.g., '08:00'
  tillTime String // e.g., '18:00'
  isActive Boolean @default(true) // Toggle availability for the day

  user    Users     @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}


model Note {
  id       String              @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    Users     @relation(fields: [authorId], references: [id])
  authorId  String
}

model SharedNote {
  id       String              @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    Users     @relation(fields: [authorId], references: [id])
  authorId  String
  access    SharedNoteAccess[]
}

model SharedNoteAccess {
  id       String              @id @default(auto()) @map("_id") @db.ObjectId
  note      SharedNote @relation(fields: [noteId], references: [id])
  noteId    String
  user      Users     @relation(fields: [userId], references: [id])
  userId    String
  canEdit   Boolean  @default(false)

  @@unique([noteId, userId])
}



model Announcement {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  createdBy  Users    @relation(fields: [createdById], references: [id])
  createdById String  @db.ObjectId
  createdAt  DateTime @default(now())
  comments   Comment[]
}


model InstructionMaterial {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  category    String
  createdBy   Users    @relation(fields: [createdById], references: [id])
  createdById String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       String[] // Roles that can access this material
}



enum SharedStatusEnum {
  DRAFT
  PUBLISHED
  ARCHIVED
}
